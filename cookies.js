const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const { promisify } = require('util');

const access = promisify(fs.access);
const writeFile = promisify(fs.writeFile);
const readFile = promisify(fs.readFile);

const COOKIE_FILE = path.join(process.cwd(), 'cookies.txt');

// Default cookie content that should work for most basic YouTube access
const DEFAULT_COOKIE_CONTENT = `# Netscape HTTP Cookie File
# https://curl.haxx.se/rfc/cookie_spec.html
# This file was generated by yt-dlp!

.youtube.com	TRUE	/	TRUE	2145916800	CONSENT	YES+cb
.youtube.com	TRUE	/	TRUE	2145916800	GPS	1
.youtube.com	TRUE	/	TRUE	2145916800	VISITOR_INFO1_LIVE	OpwB_XVxeZI
.youtube.com	TRUE	/	TRUE	2145916800	YSC	tN3xn3pxXWM
.youtube.com	TRUE	/	TRUE	2145916800	PREF	tz=UTC&f6=40000000&hl=en`;

async function createCookieFile() {
    try {
        // Write cookie file with proper line endings for the current OS
        const content = DEFAULT_COOKIE_CONTENT.replace(/\n/g, process.platform === 'win32' ? '\r\n' : '\n');
        await writeFile(COOKIE_FILE, content, 'utf8');
        console.log('Created default cookie file successfully');
        return true;
    } catch (error) {
        console.error('Error creating cookie file:', error);
        return false;
    }
}

async function validateCookieFile() {
    try {
        // Check if file exists and is readable
        await access(COOKIE_FILE, fs.constants.R_OK);
        
        // Read and validate content
        const content = await readFile(COOKIE_FILE, 'utf8');
        const lines = content.split(/\r?\n/);
        
        // Check for proper Netscape cookie file format
        if (!lines[0]?.includes('Netscape HTTP Cookie File')) {
            console.log('Invalid cookie file format, recreating...');
            return createCookieFile();
        }

        // Verify we have at least some cookie entries
        const cookieLines = lines.filter(line => line && !line.startsWith('#'));
        if (cookieLines.length === 0) {
            console.log('No valid cookies found, recreating...');
            return createCookieFile();
        }

        return true;
    } catch (error) {
        console.log('Cookie file not found or inaccessible, creating new one...');
        return createCookieFile();
    }
}

async function extractBrowserCookies() {
    // Try different browsers in order of likelihood of success
    const browsers = ['chrome', 'firefox', 'edge', 'safari', 'chromium'];
    
    for (const browser of browsers) {
        try {
            console.log(`Attempting to extract cookies from ${browser}...`);
            
            const success = await new Promise((resolve) => {
                const process = spawn('yt-dlp', [
                    '--cookies-from-browser',
                    browser,
                    '--cookies',
                    COOKIE_FILE,
                    '--quiet',
                    'https://www.youtube.com'
                ]);

                // Set a timeout for the extraction attempt
                const timeout = setTimeout(() => {
                    process.kill();
                    resolve(false);
                }, 5000);

                process.on('close', (code) => {
                    clearTimeout(timeout);
                    resolve(code === 0);
                });

                process.on('error', () => {
                    clearTimeout(timeout);
                    resolve(false);
                });
            });

            if (success) {
                console.log(`Successfully extracted cookies from ${browser}`);
                return true;
            }
        } catch (error) {
            console.log(`Failed to extract cookies from ${browser}`);
        }
    }

    console.log('Could not extract cookies from any browser');
    return false;
}

async function initializeCookies() {
    console.log('Initializing cookies...');
    
    try {
        // First try to extract from browsers
        const extracted = await extractBrowserCookies();
        if (extracted) {
            return true;
        }

        // If extraction fails, validate existing or create new cookie file
        return await validateCookieFile();
    } catch (error) {
        console.error('Error during cookie initialization:', error);
        // Ensure we at least have a working cookie file
        return await createCookieFile();
    }
}

module.exports = {
    COOKIE_FILE,
    initializeCookies,
    validateCookieFile,
    extractBrowserCookies
};